Python install
pip install

pip install fastapi
pip install "uvicorn[standard]"

Iniciando o Server:
uvicorn "nome_do_arquivo":"nome_do_app" --reload

ex -> uvicorn main:app --reload

para visualizar o swagger da aplicação adiciona apos a barra o docs:
http://127.0.0.1:8000/docs

http://127.0.0.1:8000/redoc.

Aula #11
CORS --
É uma medida que o backend bloqueia requisições de fontes diferentes do caminho do backend
no caso meu back estava com a rota = localhost:8000 e eu tava tentando acessar usando a localhost:5500

Ai preciso permitir que ele faça a liberação:
https://fastapi.tiangolo.com/tutorial/cors/?h=cors

origins = [
    "http://localhost:5500",
    "http://127.0.0.1:5500"
]

Para liberar o CORS necessita colocar dentro do origins

# 16 - Repositório e Modelos ORM

Schema é o que transita entre Request e Response - JSON
Model é o que realmente salvar no BD 
Assim desta forma pegamos um objeto mandado pela Response para então conseguirmos salvar em nosso banco

def criar(self, produto: schemas.Produto):
    db_produto = models.Produto()

No criar recebemos o produto schema e ai dps pegamos o modelo do produto !

# BLX - Iniciar aplicação
uvicorn src.server:app --reload --reload-dir=src

# Status code
200 - success / 201 - Success Post
400 - Client error

# Response model
Serve para forçar o tipo de retorno da aplicação - Meio que força que ao retornar um certo item
retorne no schema que eu passar

# Aula 24 - Utilizar Migrations em nossa aplicação !
Utiliza-se o alembic no SQLAlchemy
Instalei pelo powershell admin -> pip install alembic
Depois iniciamos na aplicação blx - alembic init alembic

## 43 - Hash e BCrypt
pip install passlib[bcrypt] - Hash Senha
pip install python-jose[cryptography] - Criar JWT